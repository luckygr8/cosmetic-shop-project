/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package billoperations_ui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.table.DefaultTableModel;
import model.dao.Productinfo_DAO;
import model.to.Productinfo_TO;
import utility.Checks;

/**
 *
 * @author LAKSHAY DUTTA
 */
public class Create_a_bill extends javax.swing.JInternalFrame {

    /**
     * Creates new form Create_a_bill
     */
    private static int quantity, partyid = 0,addquantity,j,available_quantity,productid,billid;
    private float discount;
    private double grand_total, total;
    JPopupMenu popup;
    private static List<Productinfo_TO> products, cart;
    int array_of_available_quantity[];
    // List<Billinfo_TO> allbillids;
    // List<Partyinfo_TO> allparties;
    private String uname;
    HashMap<String, Integer> indexes;

    public Create_a_bill(String username, int billid) {
        initComponents();
        indexes = new HashMap<>();
        products = new Productinfo_DAO().getallrecords();
        uname = username;
        productid = 0;
        this.billid = billid;
        popup=new JPopupMenu();
        JMenuItem remove = new JMenuItem(" REMOVE FROM CART");
        popup.add(remove);
        remove.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                removefromcart();
            }
        });
        
        jcb_products.removeAllItems();
        jcb_products.addItem("select a product");
        if (products != null && products.size() > 0) {
            for (Productinfo_TO pi : products) {
                jcb_products.addItem(pi);
                partyid++;
            }
        }
        array_of_available_quantity = new int[partyid+1];
        partyid = 1;
        for (Productinfo_TO p : products) {
            array_of_available_quantity[partyid] = p.getAvailablequantity();
            indexes.put(p.getProductname(), partyid);
            partyid++;
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jcb_products = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tf_discount = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        lbl_grandtotal = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        product_slider = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        lblquantity = new javax.swing.JLabel();

        jcb_products.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcb_products.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcb_productsItemStateChanged(evt);
            }
        });

        jLabel2.setText("QUANTITY");

        jLabel3.setText("DISCOUNT");

        tf_discount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_discountActionPerformed(evt);
            }
        });
        tf_discount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tf_discountKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tf_discountKeyTyped(evt);
            }
        });

        jButton1.setText("ADD");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("close");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        tbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbl);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel4.setText("GRAND TOTAL :--");

        lbl_grandtotal.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lbl_grandtotal.setText(" Rs  00.00");

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton3.setText("Check out");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        product_slider.setPaintLabels(true);
        product_slider.setPaintTicks(true);
        product_slider.setSnapToTicks(true);
        product_slider.setValue(0);
        product_slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                product_sliderStateChanged(evt);
            }
        });

        jLabel1.setText("QUANTITY");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(product_slider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(186, 186, 186)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(lbl_grandtotal, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(74, 74, 74)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jcb_products, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblquantity, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tf_discount, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 774, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(208, 208, 208)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_grandtotal, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jcb_products, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tf_discount, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(lblquantity, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(product_slider, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(jButton3)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tf_discountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_discountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_discountActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void tf_discountKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf_discountKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_discountKeyPressed

    private void tf_discountKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf_discountKeyTyped
        if (!Checks.keytype_float(evt)) {
            evt.consume();
        }
    }//GEN-LAST:event_tf_discountKeyTyped
    private boolean allvalid;
    private String message = "s";
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        /////////////////////////////////////
        allvalid = true;
        message = "";
        if (jcb_products.getSelectedIndex() <= 0) {
            message += "Please select a product\n";
            allvalid = false;
        }
        if (Checks.isempty(tf_discount.getText().trim())) {
            message += "please enter some discount\n";
            allvalid = false;
        }
        try {
            if (Float.parseFloat(tf_discount.getText()) >= 100) {
                message += "invalid discount count\n";
                allvalid = false;
            }
        } catch (NumberFormatException e) {

        }
        if (product_slider.getValue() == 0) {
            message += "Please select some quantity\n";
            allvalid = false;
        }
       /* if (jcb_products.getSelectedIndex() > 0) {
            if (array_of_available_quantity[jcb_products.getSelectedIndex()] == 0) {
                message += "This item is out of stockslala\n";
                System.out.println("hererererer");
                allvalid = false;
            }
        }*/
        if (allvalid) {
            Productinfo_TO p = (Productinfo_TO) jcb_products.getSelectedItem();
            available_quantity = p.getAvailablequantity();
            quantity = product_slider.getValue();
            discount = Float.parseFloat(tf_discount.getText().trim());
            Productinfo_TO record = new Productinfo_TO();
            record.setProductid(p.getProductid());
            record.setProductname(p.getProductname());
            record.setSubcategoryname(p.getSubcategoryname());
            record.setBrandname(p.getBrandname());
            record.setQuantity(quantity);
            record.setDiscount(discount);
            record.setPrice(p.getPrice());
            if (cart == null) {
                cart = new ArrayList<>();
            }
            cart.add(record);
            message = "Product " + p.getProductname() + " with product ID: "
                    + "( " + Integer.toString(p.getProductid()) + ") was added in cart";
            array_of_available_quantity[jcb_products.getSelectedIndex()] -= quantity;
            bindtabledetails();
            jcb_products.setSelectedIndex(0);
        }
        JOptionPane.showMessageDialog(this, message);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        ////////////////////////////////////
        int len=jcb_products.getItemCount()-1;
        String str="";
        System.out.println(len);
        for(partyid=1;partyid<=len;partyid++)
        {
            System.out.println(partyid);
           // str=indexes.get(partyid);
            System.out.println(str);
        }
        /*left_quantity=available_quantity-quantity;
         try{
         String query="update productinfo set availablequantity=? where productid=?";
         PreparedStatement stmt = DataConnection.getStatement(query);
         stmt.setInt(1,left_quantity);
         stmt.setInt(2, record.getProductid());
         if(stmt.executeUpdate()>0)
         {
         System.out.println("success");
         }
         }catch(Exception e){
                    
         }*/
    }//GEN-LAST:event_jButton3ActionPerformed
    private static int minimum = 1, maximum = 0;
    private void jcb_productsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcb_productsItemStateChanged
        if (jcb_products.getSelectedIndex() > 0) {
            product_slider.setValue(1);
            Productinfo_TO p = (Productinfo_TO) jcb_products.getSelectedItem();

            productid = p.getProductid();
            /*try{
             String query = " select availablequantity from productinfo where productid = ?";
             PreparedStatement stmt = DataConnection.getStatement(query);
             stmt.setInt(1, productid);
             ResultSet rs = stmt.executeQuery();
             if(rs.next())
             maximum=rs.getInt("availablequantity");
            
             }catch(Exception e){
             e.printStackTrace();
             }*/
            maximum = array_of_available_quantity[jcb_products.getSelectedIndex()];
            System.out.println(maximum);
            if (maximum == 0) {
                JOptionPane.showMessageDialog(this, "this item is out of stock");
                jcb_products.setSelectedIndex(0);
            } else {
                product_slider.setMaximum(maximum);
                product_slider.setMinimum(minimum);
            }
        }
    }//GEN-LAST:event_jcb_productsItemStateChanged

    private void product_sliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_product_sliderStateChanged
        lblquantity.setText(Integer.toString(product_slider.getValue()));
    }//GEN-LAST:event_product_sliderStateChanged
    int srow=-1;
    void removefromcart() {
        int index = 0;
        if (srow != -1 && cart != null && srow < cart.size()) {
            int result = JOptionPane.showConfirmDialog(this, "Are You Sure To Remove This item ?", "Message From System", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                Productinfo_TO rec = cart.get(srow);
                addquantity = rec.getQuantity();
                index=indexes.get(rec.getProductname());
                array_of_available_quantity[index]+=addquantity;
                cart.remove(rec);
                bindtabledetails();
                jcb_products.setSelectedIndex(0);
            }
        }
        srow = -1;
        
    }
    private void tblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMouseClicked
         if (evt.getButton() == MouseEvent.BUTTON3) {
            int point = tbl.rowAtPoint(evt.getPoint());
            tbl.getSelectionModel().setSelectionInterval(point, point);
            popup.show(tbl, evt.getX(), evt.getY());
            srow = tbl.getSelectedRow();
            popup.show(tbl, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_tblMouseClicked
    public void bindtabledetails() {
        String[] col_names = {"product ID", "Product name", "brand name", "subcategory name", "price", "Quantity", "Discount", "Total"};
        Object[][] records = null;
        if (cart != null && cart.size() > 0) {
            grand_total = 0;
            records = new Object[cart.size()][col_names.length];
            int i = 0;
            for (Productinfo_TO p : cart) {
                total = p.getPrice() * p.getQuantity() - p.getPrice() * p.getQuantity() * p.getDiscount() / 100;
                grand_total += total;
                records[i] = new Object[]{p.getProductid(), p.getProductname(), p.getBrandname(), p.getSubcategoryname(), p.getPrice(), p.getQuantity(), p.getDiscount(), total};
                i++;
            }
            lbl_grandtotal.setText(Double.toString(grand_total));

        } else {
            records = new Object[1][col_names.length];
            records[0] = new Object[]{"No Purchase", "No Purchase", "No Purchase", "No Purchase", "No Purchase", "No Purchase", "No Purchase", "No Purchase"};
            lbl_grandtotal.setText("00.00");
        }
        DefaultTableModel dtm = new DefaultTableModel(records, col_names) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        tbl.setModel(dtm);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox jcb_products;
    private javax.swing.JLabel lbl_grandtotal;
    private javax.swing.JLabel lblquantity;
    private static javax.swing.JSlider product_slider;
    private javax.swing.JTable tbl;
    private javax.swing.JTextField tf_discount;
    // End of variables declaration//GEN-END:variables
}
